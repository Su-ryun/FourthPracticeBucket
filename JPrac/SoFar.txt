//https://www.jsoftware.com/help/learning/01.htm
//Going through the above.
//I don't know if J has a comment.
//The below is a square function ... 
*:
//So, if I pass in 1 2 3 4 ...
*: 1 2 3 4
//Ouput becomes ...
1 4 9 16 
//Notice how the operation was apply to each and every element.
//So ...
1 2 3 + 10 20 30
//Outputs ...
11 22 33
////
1 2 3 + 10
//Outputs
11 12 13
//But ...
1 2 + 10 20 30
//Outputs ...
|length error
|   1 2    +10 20 30
//Same goes for the ...
   1 2 3 + 10 20
//Outputs ...
|length error
|   1 2 3    +10 20
//To compute remainders, I use the vertical bar, instead of the modulo.
////
//To create a variable:
x =: 100
//J has this thing called insert function.
+ / 2 3 4
//The above is same as:
2 + 3 + 4
//So, the result would be.
9
////
//Conditionals are trated via 1 or 0, like the old C.
//Therefore ...
2 = 2
//Outputs 
1
//The below:
2 < 1
//Outputs
//Consider the below:
x =: 5 4 1 9
//x currently has 4 elements (it's a list).
x > 2
//The above asks, "does x has more than 2 elements?"
//J has a comment.
NB. This is a whole line of annotation.
//J Provides monadic functions, like the ones from Haskell.
>. _1.7 1 1.7
// So, the >. function will intake the elements on the right and output ...
_1 1 2
// There is also a monadic function to increment a given value.
>: _2 3 5 6.3
// The above will output.
_1 4 6 7.3
//A table with 2 rows and 3 columns can be created via ...
table =: 2 3   $   5 6 7  8 9 10
//Which can be built with the $ function.
////
//Strings are written with singl quotation marks.
someString =: 'lol'
//J doesn't have any escape sequences; therefore, in order to chuck in a single quote inside a String.
'What''s up'
//You have put in two successive single quotes to do just that.
////
//I am pretty sure the below concept is pretty darn important.
//There is this concept called "Box" in J, and I just don't see the reason for using it.
//From the looks of things, Boxing is very J specific, and no other languages use'em.
//It's a freaking strange concept; so, this is one of the demonstration.
A =: 'The answer is'  ;  42
// Reference A now has two boxes.
// I can fetch one of them specific via "selecting."
0 { A
// The above will grab me 'The answer is', which is still boxed.
//Elements can either be boxed or unboxed.
//The below boxes the element,
b =: < 1 2 3
//where I can unbox them via like below.
> b
////
//So, I have to go back to ch 3 because there were a lot of concepts
//those don't exist in majority of the languages I've encountered in my life.
 ////
 //From the looks of things, this is the only way to create String at the moment?
txt =: 0 : 0
What is called a "script" is
a sequence of lines of J.
)
//The variable txt now contains the following: "What is called a "script" is a sequence of lines of J."
//In the realm of J, you can perform sequences of operation via like the below:
   script =: 0 : 0
t =: T - 32
t * 5 % 9
)
do =: 0 !: 1
//With the aboves, when you execute the below:
do script
//The output will be:
t =: T - 32
t * 5 % 9
100
//Of course, you can assign a new value to T.
////
//The below is an example on how one could use branches in J.
volume =: 3 : 0
if.   3 = # y
do.   * / y
else. 'ERROR'
end.
)
//What the heck am I looking at, really.
////
//J script file ends with .ijs.
//For example, full name of a J file could be: myscript.ijs
F =: 'D:\temp\myscript.ijs'
//Where reference F contains the path to myscript.ijs
//Let's assume myscript.ijs contains ...
squareroot =: %:
z =: 1 , (2+2) , (4+5)
//Since, instance F has a path to the file containing the above ...
0!:1 < F
//I can use the contents inside the myscript like a macro from C/C++.